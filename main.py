from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackQueryHandler, Filters
import os
import apscheduler.jobstores.base
import logging
from datetime import timedelta

from telegram.ext import CallbackContext, ConversationHandler
from dotenv import load_dotenv

load_dotenv()
def handle_admin_reply(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    admin_id = int(os.environ.get('ADMIN_ID', 0))
    
    if query.from_user.id != admin_id:
        query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    user_id = int(query.data.split('_')[1])
    context.user_data['replying_to'] = user_id
    query.answer()
    query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return ConversationHandler.END
from flask import Flask, render_template, url_for, redirect
import os
import logging
import threading
import time
from datetime import datetime
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackContext, Filters, CallbackQueryHandler
from web_app_routes import app

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Global variables
banned_users = set()
TELEGRAM_API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
CHANNEL_NAME = os.getenv('CHANNEL_NAME')
POST_INTERVAL = int(os.environ.get('POST_INTERVAL', 72)) * 3600  # Get interval from environment variable
MAINTENANCE_MODE = False  # Global variable to track maintenance mode

# Global variables for statistics
TOTAL_USERS = set()
TOTAL_MESSAGES = 0

def ban_user(update: Update, context: CallbackContext) -> None:
    admin_id = int(os.environ.get('ADMIN_ID', 0))
    if update.effective_user.id != admin_id:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if context.args:
        try:
            user_id = int(context.args[0])
            reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            banned_users.add(user_id)
            ban_message = f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            update.message.reply_text(ban_message)
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            
            # Notify the banned user
            try:
                context.bot.send_message(chat_id=user_id, text=f"–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            except telegram.error.Unauthorized:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.")
        except ValueError:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –ø—Ä–∏—á–∏–Ω—É.")

def banned_list(update: Update, context: CallbackContext) -> None:
    admin_id = int(os.environ.get('ADMIN_ID', 0))
    if update.effective_user.id != admin_id:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not banned_users:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
    else:
        banned_list_text = "–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(map(str, banned_users))
        update.message.reply_text(banned_list_text)

def unban_user(update: Update, context: CallbackContext) -> None:
    admin_id = int(os.environ.get('ADMIN_ID', 0))
    if update.effective_user.id != admin_id:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if context.args:
        try:
            user_id = int(context.args[0])
            if user_id in banned_users:
                banned_users.remove(user_id)
                unban_message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                update.message.reply_text(unban_message)
                logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
                
                # Notify the unbanned user
                try:
                    context.bot.send_message(chat_id=user_id, text="–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
                except telegram.error.Unauthorized:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.")
            else:
                update.message.reply_text(f"‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        except ValueError:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")

def reply_to_user(update: Update, context: CallbackContext) -> None:
    admin_id = int(os.environ.get('ADMIN_ID', 0))
    if update.effective_user.id != admin_id:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # Check if this is a reply to a message
    if update.message.reply_to_message:
        reply_text = update.message.reply_to_message.text
        if reply_text.startswith("/reply"):
            try:
                user_id = int(reply_text.split()[1])
                message_text = update.message.text
            except (ValueError, IndexError):
                update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                return
        else:
            update.message.reply_text("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—É /reply.")
            return
    else:
        # If it's a direct command
        if len(context.args) < 2:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        try:
            user_id = int(context.args[0])
            message_text = ' '.join(context.args[1:])
        except ValueError:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
    
    try:
        admin_message = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message_text}"
        context.bot.send_message(chat_id=user_id, text=admin_message)
        update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message_text}")
    except telegram.error.Unauthorized:
        update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    except Exception as e:
        update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

def handle_message(update: Update, context: CallbackContext) -> None:
    global TOTAL_USERS, TOTAL_MESSAGES
    if 'reminder_job' in context.user_data:
        try:
            context.user_data['reminder_job'].schedule_removal()
        except apscheduler.jobstores.base.JobLookupError:
            logger.warning(f"Job not found for user {update.effective_user.id if update.effective_user else 'Unknown'}")
    if update.effective_user is None:
        logger.error("Received update with no effective user")
        return
    
    user = update.effective_user
    TOTAL_USERS.add(user.id)
    
    if MAINTENANCE_MODE and user.id != int(os.environ.get('ADMIN_ID', 0)):
        update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    user_id = user.id
    
    if user_id in banned_users:
        update.message.reply_text("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    
    if update.message is None:
        logger.error(f"Received update with no message for user {user_id}")
        return
    
    message = update.message
    
    # Check if the message is empty (no text, photo, video, or document)
    if not message.text and not message.photo and not message.video and not message.document:
        # Silently ignore empty messages
        return
    
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Schedule reminder for the next possible post
    post_interval = int(os.environ.get('POST_INTERVAL', 72)) * 3600
    next_post_time = datetime.now() + timedelta(seconds=post_interval)
    context.user_data['reminder_job'] = context.job_queue.run_once(send_reminder, post_interval, context=user_id)
    logger.info(f"Scheduled reminder for user {user_id} at {next_post_time}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    try:
        chat_member = context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if chat_member.status not in ['member', 'administrator', 'creator']:
            channel_name = os.getenv('CHANNEL_NAME', '')
            if channel_name:
                channel_name = channel_name.replace('@', '')
                keyboard = [[InlineKeyboardButton("üåü –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üåü", url=f"https://t.me/{channel_name}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                update.message.reply_text(
                    f"üëã –ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! ü§ó\n\n"
                    f"üåà –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å! –ß—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. üöÄ‚ú®\n\n"
                    f"üéâ –¢–∞–º —Ç–µ–±—è –∂–¥–µ—Ç:\n"
                    f"   üîπ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                    f"   üîπ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è\n"
                    f"   üîπ –ù–æ–≤—ã–µ –¥—Ä—É–∑—å—è –∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏\n\n"
                    f"üî• –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–¥–ø–∏—à–∏—Å—å! üåü\n\n"
                    f"–ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π —Å–µ–º—å–µ! ü§óüíñ",
                    reply_markup=reply_markup
                )
            else:
                update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    except telegram.error.TelegramError as e:
        logger.error(f"Error checking channel subscription: {str(e)}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if message.document:
        content_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
    elif message.photo:
        content_type = "—Ñ–æ—Ç–æ"
    elif message.video:
        content_type = "–≤–∏–¥–µ–æ"
    else:
        content_type = "—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    
    log_message = f"üìÖ {current_time}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({'@' + user.username if user.username else '–±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}) –æ—Ç–ø—Ä–∞–≤–∏–ª {content_type}."
    
    if message.caption:
        log_message += f"\nüìù {message.caption}"
    elif message.text:
        log_message += f"\nüìù {message.text}"
    
    logger.info(log_message)
    
    admin_id = int(os.environ.get('ADMIN_ID', 0))
    if admin_id:
        user_info = f"{user.first_name} (@{user.username})" if user.username else user.first_name or "–±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        admin_message = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info}\n"
            f"üÜî ID: {user.id}\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text or message.caption}\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/reply {user.id}\n"
            f"/ban {user.id}\n"
            f"/unban {user.id}"
        )
        context.bot.send_message(chat_id=admin_id, text=admin_message)
    
    if message.document or message.photo or message.video:
        if message.caption:
            current_time = int(time.time())
            last_post_time = context.user_data.get('last_post_time', 0)
            
            if current_time - last_post_time < POST_INTERVAL:
                remaining_time = POST_INTERVAL - (current_time - last_post_time)
                hours, remainder = divmod(remaining_time, 3600)
                minutes, _ = divmod(remainder, 60)
                interval_hours = POST_INTERVAL // 3600
                cooldown_message = f"‚è≥ –û–π-–æ–π! –ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å! üï∞Ô∏è\n\n–¢—ã —Å–º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {int(hours)} —á–∞—Å–æ–≤ –∏ {int(minutes)} –º–∏–Ω—É—Ç. –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {interval_hours} —á–∞—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø—Ä–∏–¥—É–º–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Å—É–ø–µ—Ä-–∫—Ä—É—Ç–æ–µ! üöÄ‚ú®"
                update.message.reply_text(cooldown_message)
                
                if admin_id:
                    admin_message = f"üïí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} (@{user.username if user.username else '–±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏.\n\n–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {int(hours)} —á–∞—Å–æ–≤ –∏ {int(minutes)} –º–∏–Ω—É—Ç."
                    context.bot.send_message(chat_id=admin_id, text=admin_message)
                
                return
            
            try:
                if 'last_message' in context.user_data:
                    try:
                        context.bot.delete_message(chat_id=CHANNEL_ID, message_id=context.user_data['last_message'])
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

                button_text = f"–ù–∞–ø–∏—Å–∞—Ç—å {user.first_name}" if user.first_name else f"–ù–∞–ø–∏—Å–∞—Ç—å {user.username}" if user.username else "–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É"
                keyboard = [[InlineKeyboardButton(button_text, url=f"tg://user?id={user_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if message.document:
                    sent_message = context.bot.send_document(
                        chat_id=CHANNEL_ID,
                        document=message.document.file_id,
                        caption=message.caption,
                        reply_markup=reply_markup
                    )
                elif message.photo:
                    sent_message = context.bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=message.photo[-1].file_id,
                        caption=message.caption,
                        reply_markup=reply_markup
                    )
                elif message.video:
                    sent_message = context.bot.send_video(
                        chat_id=CHANNEL_ID,
                        video=message.video.file_id,
                        caption=message.caption,
                        reply_markup=reply_markup
                    )
                
                context.user_data['last_message'] = sent_message.message_id
                context.user_data['last_post_time'] = current_time
                global TOTAL_MESSAGES
                TOTAL_MESSAGES += 1
                
                keyboard = [[InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç üóëÔ∏è", callback_data=f"delete_{sent_message.message_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                interval_hours = POST_INTERVAL // 3600
                confirmation_message = update.message.reply_text(
                    f"üéâ –£—Ä–∞! –¢–≤–æ–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ! üåü\n\n"
                    f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–≤–æ–π –ø–æ—Å—Ç (–µ—Å–ª–∏ –æ–Ω –±—ã–ª) —É–¥–∞–ª–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–π –ø–æ—Å—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {interval_hours} —á–∞—Å–æ–≤. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ! üí°‚ú®\n\n"
                    "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç' –Ω–∏–∂–µ. "
                    "–ö–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                    reply_markup=reply_markup
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {CHANNEL_ID}")
                # Schedule the button to be inactive after 5 minutes
                context.job_queue.run_once(remove_delete_button, 300, context={'chat_id': confirmation_message.chat_id, 'message_id': confirmation_message.message_id})
                logger.info(f"Scheduled removal of delete button for message {confirmation_message.message_id} in 5 minutes.")
            except Exception as e:
                error_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}"
                logger.error(error_message)
                update.message.reply_text("üòï –û–π, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. üõ†Ô∏è\n\n"
                                         "–î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ Telegram:\n\n"
                                         "1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n"
                                         "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏ –≤ '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å'\n"
                                         "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏ '–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π'\n"
                                         "4Ô∏è‚É£ –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–ø—Ü–∏—è '–ö—Ç–æ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ '–í—Å–µ'\n\n"
                                         "–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø–æ–ø—Ä–æ–±—É–π:\n"
                                         "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram\n"
                                         "üîÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑\n\n"
                                         "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –°–≤—è–∂–∏—Å—å —Å –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º! ü¶∏‚Äç‚ôÇÔ∏è")
        else:
            update.message.reply_text("üìù –û–π! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –∑–∞–±—ã–ª –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–∞–π–ª—É. –î–æ–±–∞–≤—å –ø–∞—Ä—É —Å–ª–æ–≤! ‚ú®")
    else:
        update.message.reply_text("üì∏ –û–π! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –∑–∞–±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å –º–µ–¥–∏–∞—Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, —á—Ç–æ–±—ã –≤—Å–µ –º–æ–≥–ª–∏ —É–≤–∏–¥–µ—Ç—å —Ç–≤–æ–π –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ! üåü")

def handle_callback_query(update: Update, context: CallbackContext) -> None:
    logger.debug("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ handle_callback_query")
    query = update.callback_query
    
    callback_data = query.data.split("_")
    action = callback_data[0]
    message_id = int(callback_data[1]) if len(callback_data) > 1 else None
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {action}")
    
    try:
        if action == "delete":
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
                context.bot.delete_message(chat_id=CHANNEL_ID, message_id=message_id)
                context.user_data.pop('last_message', None)
                context.user_data.pop('last_post_time', None)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞.")
                query.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞!")
                query.edit_message_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
            except telegram.error.BadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {str(e)}")
                query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
                query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {str(e)}", exc_info=True)
                query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            # Schedule the button to be inactive after 5 minutes
            context.job_queue.run_once(remove_delete_button, 300, context={'chat_id': query.message.chat_id, 'message_id': message_id})
            logger.info(f"Scheduled removal of delete button for message {message_id} in 5 minutes.")
        elif action == "reply":
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message_id}")
            context.user_data['replying_to'] = message_id
            query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message_id}:")
            return ConversationHandler.END
        elif action == "ban":
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message_id}")
            query.edit_message_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message_id}?",
                                    reply_markup=InlineKeyboardMarkup([[
                                        InlineKeyboardButton("–î–∞", callback_data=f"confirm_ban_{message_id}"),
                                        InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_ban")
                                    ]]))
        elif action == "confirm":
            logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message_id}")
            ban_user(update, context)
            query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message_id} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        elif query.data == "cancel_ban":
            logger.info("–û—Ç–º–µ–Ω–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            query.edit_message_text("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_query: {query.data}")
            query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query: {str(e)}", exc_info=True)
        query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
    
    logger.debug("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ handle_callback_query")
    
    if update.effective_message:
        if update.effective_message.document or update.effective_message.photo or update.effective_message.video:
            if update.effective_message.caption:
                current_time = int(time.time())
                last_post_time = context.user_data.get('last_post_time', 0)
                
                if current_time - last_post_time < POST_INTERVAL:
                    remaining_time = POST_INTERVAL - (current_time - last_post_time)
                    hours, remainder = divmod(remaining_time, 3600)
                    minutes, _ = divmod(remainder, 60)
                    cooldown_message = f"‚è≥ –û–π-–æ–π! –ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å! üï∞Ô∏è\n\n–¢—ã —Å–º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {int(hours)} —á–∞—Å–æ–≤ –∏ {int(minutes)} –º–∏–Ω—É—Ç. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø—Ä–∏–¥—É–º–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Å—É–ø–µ—Ä-–∫—Ä—É—Ç–æ–µ! üöÄ‚ú®"
                    update.effective_message.reply_text(cooldown_message)
                    
                    # Notify admin about the cooldown
                    admin_id = int(os.environ.get('ADMIN_ID', 0))
                    if admin_id:
                        admin_message = f"üïí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} (@{update.effective_user.username}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏.\n\n{cooldown_message}"
                        context.bot.send_message(chat_id=admin_id, text=admin_message)
                    
                    return
                
                try:
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if 'last_message' in context.user_data:
                        try:
                            context.bot.delete_message(chat_id=CHANNEL_ID, message_id=context.user_data['last_message'])
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É"
                    user_id = update.effective_user.id
                    keyboard = [[InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É", url=f"tg://user?id={user_id}")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
                    if update.effective_message.document:
                        sent_message = context.bot.send_document(
                            chat_id=CHANNEL_ID,
                            document=update.effective_message.document.file_id,
                            caption=update.effective_message.caption,
                            reply_markup=reply_markup
                        )
                    elif update.effective_message.photo:
                        sent_message = context.bot.send_photo(
                            chat_id=CHANNEL_ID,
                            photo=update.effective_message.photo[-1].file_id,
                            caption=update.effective_message.caption,
                            reply_markup=reply_markup
                        )
                    elif update.effective_message.video:
                        sent_message = context.bot.send_video(
                            chat_id=CHANNEL_ID,
                            video=update.effective_message.video.file_id,
                            caption=update.effective_message.caption,
                            reply_markup=reply_markup
                        )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    context.user_data['last_message'] = sent_message.message_id
                    context.user_data['last_post_time'] = current_time
                    
                    keyboard = [[InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç üóëÔ∏è", callback_data=f"delete_{sent_message.message_id}")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    update.effective_message.reply_text(
                        "üéâ –£—Ä–∞! –¢–≤–æ–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ! üåü\n\n"
                        "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç (–µ—Å–ª–∏ –æ–Ω –±—ã–ª–æ) —É–¥–∞–ª–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π —à–µ–¥–µ–≤—Ä —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ 72 —á–∞—Å–∞. "
                        "–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ! üí°‚ú®\n\n"
                        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç' –Ω–∏–∂–µ. "
                        "–ö–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
                        reply_markup=reply_markup
                    )
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {CHANNEL_ID}")
                except Exception as e:
                    error_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}"
                    logger.error(error_message)
                    update.effective_message.reply_text("üòï –û–π, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. üõ†Ô∏è\n\n"
                                                        "–î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ Telegram:\n\n"
                                                        "1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n"
                                                        "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏ –≤ '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å'\n"
                                                        "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏ '–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π'\n"
                                                        "4Ô∏è‚É£ –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–ø—Ü–∏—è '–ö—Ç–æ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ '–í—Å–µ'\n\n"
                                                        "–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø–æ–ø—Ä–æ–±—É–π:\n"
                                                        "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram\n"
                                                        "üîÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑\n\n"
                                                        "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –°–≤—è–∂–∏—Å—å —Å –Ω–∞—à–∏–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º! ü¶∏‚Äç‚ôÇÔ∏è")
            else:
                update.effective_message.reply_text("üìù –û–π! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –∑–∞–±—ã–ª –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–∞–π–ª—É. –î–æ–±–∞–≤—å –ø–∞—Ä—É —Å–ª–æ–≤, —á—Ç–æ–±—ã –≤—Å–µ –ø–æ–Ω—è–ª–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –∫—Ä—É—Ç–æ–π! ‚ú®")
        else:
            update.effective_message.reply_text("üì∏ –û–π! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –∑–∞–±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å –º–µ–¥–∏–∞—Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, —á—Ç–æ–±—ã –≤—Å–µ –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è —Ç–≤–æ–∏–º —à–µ–¥–µ–≤—Ä–æ–º! üåü")
    elif update.callback_query:
        query = update.callback_query
        if query.data.startswith("delete_"):
            message_id = int(query.data.split("_")[1])
            try:
                context.bot.delete_message(chat_id=CHANNEL_ID, message_id=message_id)
                query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        elif query.data.startswith("reply_"):
            user_id = int(query.data.split("_")[1])
            context.user_data['replying_to'] = user_id
            query.answer()
            query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")

def setup_telegram_bot():
    if not TELEGRAM_API_TOKEN:
        logger.error("TELEGRAM_API_TOKEN is missing. Please set it in the Env Secrets tab.")
        print_setup_instructions()
        return False

    try:
        updater = Updater(TELEGRAM_API_TOKEN)
        dispatcher = updater.dispatcher
        
        # Add handlers here
        dispatcher.add_handler(CommandHandler("set_interval", set_interval))
        dispatcher.add_handler(CommandHandler("get_interval", get_interval))
        dispatcher.add_handler(MessageHandler(Filters.all & ~Filters.command, handle_message))
        dispatcher.add_handler(CommandHandler("ban", ban_user))
        dispatcher.add_handler(CommandHandler("banned_list", banned_list))
        dispatcher.add_handler(CommandHandler("unban", unban_user))
        dispatcher.add_handler(CommandHandler("reply", reply_to_user))
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(CommandHandler("maintenance", toggle_maintenance))
        dispatcher.add_handler(CommandHandler("stats", show_stats))
        dispatcher.add_handler(CallbackQueryHandler(handle_callback_query))
        return updater  # Return the updater object

    except Exception as e:
        logger.error(f"An error occurred while setting up the Telegram bot: {str(e)}")
        return False

def run_telegram_bot(updater):
    logger.info(f"Starting Telegram bot @{updater.bot.username}")
    # Start polling
    updater.start_polling()
    logger.info(f"Bot @{updater.bot.username} is now running.")
    print(f"üéâ Bot @{updater.bot.username} is now connected and ready to use! üéâ")
    print(f"üöÄ Click here to start chatting: https://t.me/{updater.bot.username} üöÄ")
    updater.idle()

def main():
    try:
        logging.info("Setting up Telegram bot")
        updater = setup_telegram_bot()
        if not updater:
            logging.error("Failed to set up Telegram bot. Exiting.")
            return
        
        logging.info("Starting Telegram bot")
        run_telegram_bot(updater)
    except Exception as e:
        logging.error(f"An error occurred while setting up or running the Telegram bot: {str(e)}")
        logging.debug("Exception details", exc_info=True)
    finally:
        logging.info("Bot has been stopped")

def start(update: Update, context: CallbackContext) -> None:
    interval_hours = POST_INTERVAL // 3600
    welcome_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª–µ! üé®‚ú®\n\n"
        "ü§ñ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏ —Å –Ω–∞—à–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º.\n\n"
        "üöÄ –í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏ –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n"
        "2Ô∏è‚É£ –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫—É—é –µ–≥–æ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ, –≥–¥–µ –≤—Å–µ —Å–º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å –≤–∞—à–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ!\n"
        "3Ô∏è‚É£ –î—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –µ—Å–ª–∏ –≤–∞—à –ø–æ—Å—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏—Ö.\n\n"
        f"‚è≥ –ü–æ–º–Ω–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ {interval_hours} —á–∞—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ!\n\n"
        "üåü –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
    )
    update.message.reply_text(welcome_message)
def set_interval(update: Update, context: CallbackContext) -> None:
    admin_id = int(os.environ.get('ADMIN_ID', 0))
    if update.effective_user.id != admin_id:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args or not context.args[0].isdigit():
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: /set_interval 48")
        return
    
    new_interval = int(context.args[0])
    os.environ['POST_INTERVAL'] = str(new_interval)
    global POST_INTERVAL
    POST_INTERVAL = new_interval * 3600
    
    update.message.reply_text(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_interval} —á–∞—Å–æ–≤.")
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ –Ω–∞ {new_interval} —á–∞—Å–æ–≤.")

def get_interval(update: Update, context: CallbackContext) -> None:
    current_interval = int(os.environ.get('POST_INTERVAL', 72))
    update.message.reply_text(f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏: {current_interval} —á–∞—Å–æ–≤.")

def send_reminder(context: CallbackContext):
    job = context.job
    user_id = job.context
    interval_hours = int(os.environ.get('POST_INTERVAL', 72))
    reminder_message = (
        f"üéâ –ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—à–ª–æ {interval_hours} —á–∞—Å–æ–≤ —Å –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞. üïí\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª! üöÄ\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –Ω–æ–≤—ã–º–∏ –∏–¥–µ—è–º–∏, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. –ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞! ‚ú®\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ –º–Ω–µ, –∏ —è –æ–ø—É–±–ª–∏–∫—É—é –≤ –∫–∞–Ω–∞–ª–µ. üòä"
    )
    context.bot.send_message(chat_id=user_id, text=reminder_message)

def remove_delete_button(context: CallbackContext):
    job_data = context.job.context
    try:
        context.bot.edit_message_reply_markup(chat_id=job_data['chat_id'], message_id=job_data['message_id'], reply_markup=None)
        logger.info(f"Delete button removed for message {job_data['message_id']}.")
    except telegram.error.BadRequest as e:
        if "Message is not modified" in str(e):
            logger.info(f"Delete button was already removed for message {job_data['message_id']}.")
        else:
            logger.error(f"Failed to remove delete button for message {job_data['message_id']}: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error while removing delete button for message {job_data['message_id']}: {str(e)}")
def toggle_maintenance(update: Update, context: CallbackContext) -> None:
    global MAINTENANCE_MODE
    admin_id = int(os.environ.get('ADMIN_ID', 0))
    if update.effective_user.id != admin_id:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    MAINTENANCE_MODE = not MAINTENANCE_MODE
    status = "–≤–∫–ª—é—á–µ–Ω" if MAINTENANCE_MODE else "–≤—ã–∫–ª—é—á–µ–Ω"
    update.message.reply_text(f"–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è {status}.")
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {update.effective_user.id} {status} —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.")

def show_stats(update: Update, context: CallbackContext) -> None:
    admin_id = int(os.environ.get('ADMIN_ID', 0))
    if update.effective_user.id != admin_id:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    stats_message = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(TOTAL_USERS)}\n–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {TOTAL_MESSAGES}"
    update.message.reply_text(stats_message)

if __name__ == "__main__":
    main()